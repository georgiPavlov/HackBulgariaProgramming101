17. Fibonacci number

Implement a function int fibNumber(int n),
which takes an integer n and returns a number, which is
formed by concatenating the first n Fibonacci numbers.

Examples:

fibNumber(3) == 112
fibNumber(10) == 11235813213455
18. Lucas series

Because Fibonacci is way too trivial, implement the following functions
that work with Lucas series:

int nthLucas(int n) -> returns the nth Lucas number
Quick hint:

L(0) = 2
L(1) = 1
L(n) = L(n-1) + L(n-2)
19. Increasing and Decreasing Sequences

Implement the following functions:

boolean IsIncreasing(int[] sequence) which returns true
if for every two consecutive elements a and b, a < b holds.
boolean IsDecreasing(int[] sequence) which returns true
if for every two consecutive elements a and b, a > b holds.
20. Longest subsequence of equal consecutive elements

Implement the function int maxEqualConsecutive(int[] items), which takes an array of ints and returns an integer - the count of elements in the longest subsequence of equal consecutive elements.

For example, in the array [1, 2, 3, 3, 3, 3, 4, 3, 3], the result is 4, where the longest subsequence is formed by 3, 3, 3, 3

Test examples::

maxEqualConsecutive(new int[] {1, 2, 3, 3, 3, 3, 4, 3, 3}) == 4
maxEqualConsecutive(new int[] {1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5}) == 3
21. Longest subsequence of increasing consecutive elements

Implement the function int maxIncreasingConsecutive(int[] items),
which takes an array of ints and returns an integer - the count of
 elements in the longest subsequence of increasing consecutive elements.

For example, in the array [1, 2, 3, 3, 3, 3, 4, 3, 3], the result is 7,
 where the longest subsequence is formed by 1, 2, 3, 3, 3, 3, 4

Test examples::

maxIncreasingConsecutive([1, 2, 3, 3, 3, 3, 4, 3, 3]) == 7
maxIncreasingConsecutive([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5]) == 11
22. Unique words

Implement a function, called int uniqueWordsCount(String[] arr) which
 returns the number of different words in arr.

Test examples

uniqueWordsCount(new String[] {"apple", "banana", "apple", "pie"}) == 3
uniqueWordsCount(new String[] {"java", "java", "java", "android"}) == 2
uniqueWordsCount(new String[] {"HELLO!", "HELLO!", "HELLO!" "HELLO!"}) == 1